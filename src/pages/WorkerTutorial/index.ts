export const FibonacciWorkerTs = () => {
  return "/* eslint-disable no-restricted-globals */\n// ^^^ have this at the top of your file so TypeScript doesn't complain\n\n/**\n * api for accessing worker; \n * all web workers need to follow this recipe: \n * self.onmessage = (e: MessageEvent<your data type>) =>{ self.postMessage(...)}\n * @param e\n */\nself.onmessage = (e: MessageEvent<number>) => {\n  self.postMessage({\n    n: e.data, // records which term is computed\n    term: fibonacci(e.data), // calls the fibonacci code and posts when finished\n  });\n};\n\n/**\n * this function recursively does the computation for fibonacci\n *\n * This function could be imported into this file from another\n * @param n\n * @returns\n */\nconst fibonacci = (n: number): number => {\n  if (n < 2) { // stopping condition\n    return n;\n  } else { // recurse\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  }\n};\n\nexport {};\n";
};
export const AppTsxCode = () => {
  return 'import { useEffect, useMemo, useState } from "react";\n\nexport function App() {\n  // user input: store and update desired term to compute\n  const [n, updateN] = useState<number | undefined>(undefined);\n  // solution from worker: stores the answer of most recently complete web worker call\n  const [ans, updateAns] = useState<{ term: number; n: number } | undefined>(\n    undefined\n  );\n\n  // fibonacci worker: instantiate your worker in this manner\n  const computeFib: Worker = useMemo(\n    () => new Worker(new URL("./fibonacci-worker.ts", import.meta.url)),\n    []\n  );\n  // listen for and store results from worker (updateAns(...))\n  useEffect(() => {\n    if (window.Worker) {\n      computeFib.onmessage = (\n        e: MessageEvent<{ term: number; n: number } | undefined>\n      ) => {\n        updateAns(e.data); // store results\n      };\n    }\n  }, [computeFib]);\n  return (\n    <div>\n      <div>\n        <b>\n          computes i<i>th</i> term of\n          <br />\n          <a href="https://en.wikipedia.org/wiki/Fibonacci_sequence">\n            Fibonacci Sequence\n          </a>\n        </b>\n      </div>\n      <input // styled in index.css\n        onChange={(e) => {\n          // update input as user changes it\n          updateN(+e.target.value);\n          // call worker as user changes input\n          computeFib.postMessage(+e.target.value);\n        }}\n        type="number"\n        value={n}\n      />\n      <div>\n        {ans ? (\n          <>\n            <i>sequence term #{ans.n}: </i>\n            <b>{ans.term}</b>\n          </>\n        ) : (\n          <i>Tip: start from 35 and increase gradually</i>\n        )}\n      </div>\n    </div>\n  );\n}\n';
};
